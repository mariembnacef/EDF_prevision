#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Pipeline compl√®te de traitement des donn√©es de consommation √©lectrique et mod√©lisation
Ce script orchestre le processus complet en trois √©tapes :
1. T√©l√©chargement des fichiers de donn√©es √† partir de RTE
2. Pr√©paration des donn√©es
3. Entra√Ænement et √©valuation du mod√®le
"""

import os
import time
import sys
import subprocess
from datetime import datetime

# Impormodues personnalis√©s
import processing_data
import train_test

def main():
    """
    Fonction principale qui ex√©cute la pipeline compl√®te
    en utilisant les chemins par d√©faut du projet
    """
    start_time = time.time()
    
    # D√©finition des chemins directement bas√©s sur la structure du projet
    base_dir = os.path.dirname(os.path.abspath(__file__))
    data_dir = os.path.join(base_dir, "data")
    raw_dir = os.path.join(data_dir, "raw")
    path_annuel = os.path.join(raw_dir, "annuel")
    path_calendar = os.path.join(raw_dir, "calendar")
    processed_data_path = os.path.join(data_dir, "processed", "df_filtre.csv")
    model_dir = os.path.join(base_dir, "models")
    model_path = os.path.join(model_dir, f"xgboost_conso_model_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pkl")
    
    # Cr√©ation des r√©pertoires n√©cessaires
    os.makedirs(os.path.dirname(processed_data_path), exist_ok=True)
    os.makedirs(model_dir, exist_ok=True)
    os.makedirs(raw_dir, exist_ok=True)
    
    # Param√®tres de configuration
    do_download = True    # Mettre √† False pour sauter l'√©tape de t√©l√©chargement
    do_processing = True  # Mettre √† False pour sauter l'√©tape de pr√©traitement
    verbose = True        # Afficher plus de d√©tails pendant l'entra√Ænement
    
    # √âTAPE 0: T√©l√©chargement des fichiers (optionnel)
    if do_download:
        print("üîÑ √âTAPE 0: T√©l√©chargement des fichiers depuis RTE...")
        try:
            # Ex√©cution du script de t√©l√©chargement
            download_script = os.path.join(base_dir, "download_file.py")
            result = subprocess.run([sys.executable, download_script], check=True)
            
            if result.returncode == 0:
                print("‚úÖ T√©l√©chargement termin√© avec succ√®s")
                
                # D√©placer les fichiers extraits vers les bons r√©pertoires
                download_extracted = os.path.join(base_dir, "rte_extracted")
                
                # Cr√©er les sous-r√©pertoires s'ils n'existent pas
                os.makedirs(path_annuel, exist_ok=True)
                os.makedirs(path_calendar, exist_ok=True)
                
                # D√©placer les fichiers annuels
                src_annual = os.path.join(download_extracted, "annuel")
                if os.path.exists(src_annual):
                    os.system(f'cp -r {src_annual}/* {path_annuel}/')
                    print(f"‚úÖ Donn√©es annuelles copi√©es vers {path_annuel}")
                
                # D√©placer les fichiers calendrier (inclut les donn√©es TEMPO)
                src_calendar = os.path.join(download_extracted, "calendrier")
                src_tempo = os.path.join(download_extracted, "tempo")
                
                if os.path.exists(src_calendar):
                    os.system(f'cp -r {src_calendar}/* {path_calendar}/')
                    print(f"‚úÖ Donn√©es de calendrier copi√©es vers {path_calendar}")
                
                if os.path.exists(src_tempo):
                    os.system(f'cp -r {src_tempo}/* {path_calendar}/')
                    print(f"‚úÖ Donn√©es TEMPO copi√©es vers {path_calendar}")
            else:
                print("‚ö†Ô∏è Le t√©l√©chargement a retourn√© un code d'erreur")
        except Exception as e:
            print(f"‚ùå ERREUR lors du t√©l√©chargement des donn√©es: {str(e)}")
            print("‚ö†Ô∏è Tentative de continuer avec les donn√©es existantes...")
    else:
        print("üîÑ √âTAPE 0: T√©l√©chargement ignor√© (utilisation des donn√©es existantes)")
    
    # √âTAPE 1: Traitement des donn√©es (optionnel)
    if do_processing:
        print("\nüîÑ √âTAPE 1: Pr√©paration et nettoyage des donn√©es...")
        try:
            df = processing_data.process_consumption_data(
                path_annuel, 
                path_calendar, 
                processed_data_path
            )
            print(f"‚úÖ Donn√©es trait√©es et sauvegard√©es dans {processed_data_path}")
            print(f"   ‚Üí {df.shape[0]} lignes √ó {df.shape[1]} colonnes")
        except Exception as e:
            print(f"‚ùå ERREUR lors du traitement des donn√©es: {str(e)}")
            return 1
    else:
        print("\nüîÑ √âTAPE 1: Pr√©traitement ignor√© (utilisation des donn√©es existantes)")
        
        if not os.path.exists(processed_data_path):
            print(f"‚ùå ERREUR: Le fichier de donn√©es {processed_data_path} n'existe pas")
            return 1
    
    # √âTAPE 2: Pr√©paration des donn√©es pour la mod√©lisation
    print("\nüîÑ √âTAPE 2: Pr√©paration des donn√©es pour la mod√©lisation...")
    try:
        X, y, df_model = train_test.preparer_donnees(processed_data_path)
        print(f"‚úÖ Donn√©es pr√©par√©es: {X.shape[0]} √©chantillons avec {X.shape[1]} caract√©ristiques")
    except Exception as e:
        print(f"‚ùå ERREUR lors de la pr√©paration des donn√©es pour la mod√©lisation: {str(e)}")
        return 1
    
    # √âTAPE 3: Entra√Ænement du mod√®le
    print("\nüîÑ √âTAPE 3: Entra√Ænement du mod√®le et optimisation des hyperparam√®tres...")
    try:
        best_model, X_train, X_val, y_train, y_val = train_test.entrainer_modele(X, y, verbose=verbose)
        print("‚úÖ Mod√®le entra√Æn√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå ERREUR lors de l'entra√Ænement du mod√®le: {str(e)}")
        return 1
    
    # √âTAPE 4: √âvaluation du mod√®le
    print("\nüîÑ √âTAPE 4: √âvaluation des performances du mod√®le...")
    try:
        resultats = train_test.evaluer_modele(best_model, X_train, X_val, y_train, y_val)
        status = "‚ö†Ô∏è ATTENTION: Overfitting d√©tect√©" if resultats['overfitting'] else "‚úÖ Pas d'overfitting significatif"
        print(status)
    except Exception as e:
        print(f"‚ùå ERREUR lors de l'√©valuation du mod√®le: {str(e)}")
        return 1
    
    # √âTAPE 5: Sauvegarde du mod√®le
    print("\nüîÑ √âTAPE 5: Sauvegarde du mod√®le...")
    try:
        chemin_modele = train_test.sauvegarder_modele(best_model, model_path)
        print(f"‚úÖ Mod√®le sauvegard√© sous '{chemin_modele}'")
    except Exception as e:
        print(f"‚ùå ERREUR lors de la sauvegarde du mod√®le: {str(e)}")
        return 1
    
    # Affichage du temps d'ex√©cution
    execution_time = time.time() - start_time
    print(f"\n‚ú® Pipeline termin√©e en {execution_time:.2f} secondes ({execution_time/60:.2f} minutes)")
    print(f"üìä Mod√®le final - R¬≤: {resultats['r2_val']:.4f}, RMSE: {resultats['rmse_val']:.2f}")
    print(f"üíæ Mod√®le sauvegard√©: {model_path}")
    
    return 0

if __name__ == "__main__":
    exit(main())